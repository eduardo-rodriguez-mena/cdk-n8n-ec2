name: Deploy n8n to AWS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'CDK Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
        - diff

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  NODE_VERSION: '18'

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    environment: PoC
    outputs:
      should-deploy: ${{ steps.should-deploy.outputs.result }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'cdk/package-lock.json'

      - name: Install CDK dependencies
        working-directory: ./cdk
        run: |
          npm ci
          npm run build

      - name: CDK Synth
        working-directory: ./cdk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: npm run synth

      - name: Should deploy?
        id: should-deploy
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] || \
             [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    environment: 
      name: PoC
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'cdk/package-lock.json'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}


      - name: Install CDK dependencies
        working-directory: ./cdk
        run: |
          npm ci
          npm run build

      - name: CDK Bootstrap (if needed)
        working-directory: ./cdk
        run: |
          # Check if bootstrap is needed
          if ! aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ secrets.AWS_REGION }} >/dev/null 2>&1; then
            echo "Bootstrapping CDK..."
            npx cdk bootstrap
          else
            echo "CDK already bootstrapped"
          fi

      - name: CDK Diff
        working-directory: ./cdk
        env:
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: npm run diff
        continue-on-error: true

      - name: CDK Deploy
        working-directory: ./cdk
        env:
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: |
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            echo "üóëÔ∏è Destroying infrastructure..."
            npx cdk destroy --force
          elif [[ "${{ github.event.inputs.action }}" == "diff" ]]; then
            echo "üìã Showing diff only..."
            npx cdk diff
          else
            echo "üöÄ Deploying infrastructure..."
            npx cdk deploy --require-approval never
          fi

      - name: Get deployment outputs
        working-directory: ./cdk
        run: |
          echo "## üöÄ Deployment Results" >> $GITHUB_STEP_SUMMARY
          
          # Get stack outputs
          STACK_OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name N8nStack \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Stacks[0].Outputs' \
            --output json 2>/dev/null || echo "[]")
          
          if [[ "$STACK_OUTPUTS" != "[]" ]]; then
            echo "### Stack Outputs:" >> $GITHUB_STEP_SUMMARY
            echo "$STACK_OUTPUTS" | jq -r '.[] | "- **\(.OutputKey)**: \(.OutputValue)"' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Wait 5-10 minutes for the instance to fully initialize" >> $GITHUB_STEP_SUMMARY
          echo "2. Check https://${{ secrets.DOMAIN_NAME }} for n8n interface" >> $GITHUB_STEP_SUMMARY
          echo "3. If SSL certificate fails, SSH into the instance and run: \`sudo /home/ec2-user/n8n/init-cert.sh\`" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê n8n is available at: https://${{ secrets.DOMAIN_NAME }}"
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "‚ùå Deployment failed. Check the logs above."
            exit 1
          elif [[ "${{ needs.validate.outputs.should-deploy }}" == "false" ]]; then
            echo "‚ÑπÔ∏è Validation completed. No deployment performed."
          else
            echo "‚ö†Ô∏è Deployment status unclear."
          fi